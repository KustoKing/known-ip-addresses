name: Update Azure Service Tags

on:
  schedule:
    - cron: "0 7 * * *"  # Runs daily at 7 AM UTC
  workflow_dispatch:      # Allow manual runs

permissions:
  id-token: write         # Required for OIDC
  contents: write         # Needed if we commit changes to the repo

jobs:
  update-azure-service-tags:
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Retrieve & Compare Azure Service Tags
        shell: pwsh
        run: |
          try {
            # 1) Get a management token from Azure CLI (thanks to azure/login).
            $token = az account get-access-token `
              --resource https://management.azure.com `
              --query accessToken -o tsv

            if (-not $token) {
              Write-Error "No token retrieved from az account get-access-token"
              exit 1
            }

            # 2) Build the REST call
            $subscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            $location       = "westeurope"
            $apiVersion     = "2024-05-01"
            $uri = "https://management.azure.com/subscriptions/$subscriptionId/providers/Microsoft.Network/locations/$location/serviceTags?api-version=$apiVersion"

            Write-Host "Querying Azure Service Tags from $uri ..."
            $headers = @{
              "Authorization" = "Bearer $token"
              "Content-Type"  = "application/json"
            }

            $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method GET
            if (-not $response.values) {
              Write-Error "No 'values' found in response. Possibly no data returned."
              exit 1
            }

            # 3) Flatten results into a PowerShell list of objects
            $allTags = @{}
            foreach ($tag in $response.values) {
              $allTags[$tag.name] = @{
                Tag         = $tag.name
                Region      = $tag.properties.region
                IPAddresses = $tag.properties.addressPrefixes
              }
            }

            $expandedList = foreach ($key in $allTags.Keys) {
              $tagEntry = $allTags[$key]
              foreach ($ip in $tagEntry.IPAddresses) {
                [PSCustomObject]@{
                  Tag       = $tagEntry.Tag
                  Region    = $tagEntry.Region
                  IPAddress = $ip
                }
              }
            }

            # 4) Sort the list so it has stable ordering (Tag -> Region -> IPAddress)
            $sortedList = $expandedList | Sort-Object Tag, Region, IPAddress

            # 5) Convert to CSV in memory (string)
            $newContent = $sortedList | ConvertTo-Csv -NoTypeInformation | Out-String

            # 6) Compare with existing file (cloud-ip-ranges/azure-service-tags.csv)
            $csvPath = "cloud-ip-ranges/azure-service-tags.csv"
            New-Item -ItemType Directory -Path "cloud-ip-ranges" -Force | Out-Null

            if (Test-Path $csvPath) {
              $oldContent = Get-Content $csvPath -Raw
              if ($oldContent -ne $newContent) {
                Write-Host "Detected new or changed content. Overwriting $csvPath."
                $newContent | Out-File $csvPath
              }
              else {
                Write-Host "No changes detected. File will remain the same."
              }
            }
            else {
              Write-Host "$csvPath does not exist. Creating a new file."
              $newContent | Out-File $csvPath
            }
          }
          catch {
            Write-Error "An error occurred: $_"
            exit 1

      - name: Commit changes
        shell: pwsh
        run: |
          git config user.name "KustoKing[bot]"
          git config user.email "gianni@kustoking.com"

          $dateString = (Get-Date -Format "yyyyMMdd")
          $csvPath = "cloud-ip-ranges/azure-service-tags.csv"

          if (Test-Path $csvPath) {
            # If there's a difference in the actual file on disk, 'git diff' sees it
            if (-not (git diff --exit-code -- $csvPath)) {
              Write-Host "Changes detected in $csvPath. Committing..."
              git add $csvPath
              git commit -m "ci: update azure service tags $dateString"
              git push
            }
            else {
              Write-Host "No changes in $csvPath. Skipping commit."
            }
          }
          else {
            Write-Host "No CSV file found in cloud-ip-ranges. Skipping commit."
          }